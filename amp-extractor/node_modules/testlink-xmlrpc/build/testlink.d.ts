import * as ApiTypes from './types';
import { ActionOnDuplicate, Details, ExecutionStatus, ExecutionType, ImportanceLevel, StepAction, TestCaseStatus } from './constants';
export default class TestLink {
    private rpcClient;
    private readonly secure;
    private readonly host;
    private readonly port;
    private readonly rpcPath;
    private readonly apiKey;
    /**
     * Class constructor
     *
     * @param options - Configuration parameters
     * @param options.secure - Use or not secure connection. If set to true, use http and port 443 if a port was not defined else uses http and port 80.
     * @param options.host - Hostname or IP where TestLink is hosted.
     * @param options.port - Hostname or IP where TestLink is hosted.
     * @param options.rpcPath - Path to TestLink rpc client.
     * @param options.apiKey - The api key to interact with TestLink.
     * @param autoConnect - If set to true, the connection is established on constructor, else a call to connect() method is required.
     */
    constructor({ secure, host, port, path, rpcPath, apiKey, autoConnect, }?: {
        secure?: boolean;
        host?: string;
        port?: number;
        path?: string;
        rpcPath?: string;
        apiKey?: string;
        autoConnect?: boolean;
    });
    /**
     * Establish connection
     */
    connect(): void;
    /**
     * Uploads an attachment for an execution.
     *
     * @param options Options
     * @param options.executionid The Test Case execution id
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadExecutionAttachment(options: ApiTypes.RequestOptions & {
        executionid: string | number;
        title?: string;
        description?: string;
        filename: string;
        filetype: string;
        content: string;
    }): Promise<ApiTypes.AttachmentResult>;
    /**
     * Uploads an attachment for a Requirement Specification.
     *
     * @param options Options
     * @param options.reqspecid The Requirement Specification ID
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadRequirementSpecificationAttachment(options: ApiTypes.RequestOptions & {
        reqspecid: string | number;
        title?: string;
        description?: string;
        filename: string;
        filetype: string;
        content: string;
    }): Promise<ApiTypes.AttachmentResult>;
    /**
     * Uploads an attachment for a Requirement.
     *
     * @param options Options
     * @param options.requirementid The Requirement ID
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadRequirementAttachment(options: ApiTypes.RequestOptions & {
        requirementid: string | number;
        title?: string;
        description?: string;
        filename: string;
        filetype: string;
        content: string;
    }): Promise<ApiTypes.AttachmentResult>;
    /**
     * Uploads an attachment for a Test Project.
     *
     * @param options Options
     * @param options.testprojectid The Test Project ID
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadTestProjectAttachment(options: ApiTypes.RequestOptions & {
        testprojectid: string | number;
        title?: string;
        description?: string;
        filename: string;
        filetype: string;
        content: string;
    }): Promise<ApiTypes.AttachmentResult>;
    /**
     * Uploads an attachment for a Test Suite.
     *
     * @param options Options
     * @param options.testsuiteid The Test Suite ID
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadTestSuiteAttachment(options: ApiTypes.RequestOptions & {
        testsuiteid: string | number;
        title?: string;
        description?: string;
        filename: string;
        filetype: string;
        content: string;
    }): Promise<ApiTypes.AttachmentResult>;
    /**
     * Uploads an attachment for a Test Case.
     *
     * @param options Options
     * @param options.testcaseid The Test Case ID
     * @param [options.version] The Test Case version.
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadTestCaseAttachment(options: ApiTypes.RequestOptions & {
        testcaseid: string | number;
        version: string | number;
        title?: string;
        description?: string;
        filename: string;
        filetype: string;
        content: string;
    }): Promise<ApiTypes.AttachmentResult>;
    /**
     * Uploads an attachment for specified table. You must specify the table that
     * the attachment is connected (nodes_hierarchy, builds, etc) and the foreign
     * key id in this table.
     *
     * @param options Options
     * @param options.fkid Attachment's Foreign Key ID
     * @param options.fktable Attachment's Foreign Key Table
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadAttachment(options: ApiTypes.RequestOptions & {
        fkid: number;
        fktable: string;
        title?: string;
        description?: string;
        filename: string;
        filetype: string;
        content: string;
    }): Promise<ApiTypes.AttachmentResult>;
    /**
     * Gets attachments for specified test suite.
     *
     * @param options Options
     * @param options.testsuiteid: Test Suite id.
     */
    getTestSuiteAttachments(options: ApiTypes.RequestOptions & {
        testsuiteid: string | number;
    }): Promise<Record<number | string, ApiTypes.Attachment>>;
    /**
     * Creates a new build for a specific test plan
     *
     * @param options Options
     * @param options.testplanid TestPlan id to associate with.
     * @param options.buildname Build name.
     * @param options.buildnotes Build description
     * @param options.active Set if is active
     * @param options.open Set if is open
     * @param options.releasedate Release date in format YYYY-MM-DD
     * @param [options.copytestersfrombuild] Build id to copy from
     */
    createBuild(options: ApiTypes.RequestOptions & {
        testplanid: number;
        buildname: string;
        buildnotes: string;
        active: boolean;
        open: boolean;
        releasedate: string;
        copytestersfrombuild?: number;
    }): Promise<ApiTypes.BasicResultResponse[]>;
    /**
     * Close a build
     *
     * @param options Options
     * @param options.buildid Build id.
     */
    closeBuild(options: ApiTypes.RequestOptions & {
        buildid: string | number;
    }): Promise<ApiTypes.BasicResultResponse[]>;
    /**
     * @param options Options
     */
    getExecCountersByBuild(options: ApiTypes.RequestOptions & {
        testplanid: string | number;
    }): Promise<ApiTypes.BuildExecutionCount>;
    /**
     * Gets a list of builds within a test plan
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     */
    getBuildsForTestPlan(options: ApiTypes.RequestOptions & {
        testplanid: number;
    }): Promise<ApiTypes.Build[]>;
    /**
     * Gets the latest build by choosing the maximum build id for a specific test plan
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     */
    getLatestBuildForTestPlan(options: ApiTypes.RequestOptions & {
        testplanid: number;
    }): Promise<ApiTypes.Build>;
    /**
     * Update value of Custom Field with scope='design' for a given Build
     *
     * @param options Options
     * @param options.buildid Build id
     * @param options.testprojectid Project id
     * @param options.testplanid Test plan id
     * @param options.customfields Map containing a key-value object with custom fields.
     */
    updateBuildCustomFieldsValues(options: ApiTypes.RequestOptions & {
        buildid: string | number;
        testprojectid: string | number;
        testplanid: string | number;
        customfields: Record<number, string>;
    }): Promise<ApiTypes.StatusMsgResponse[]>;
    /**
     * Gets the result of LAST EXECUTION for a particular testcase on a test plan.
     * If there are no filter criteria regarding platform and build,
     * result will be get WITHOUT checking for a particular platform and build.
     *
     * @param options Options
     * @param options.testplanid Test Plan id.
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param [options.platformid] Platform id number.
     * @param [options.platformname] Platform name.
     * @param [options.buildid] Build id number.
     * @param [options.buildname] Build name.
     * @param [options.options]
     * @param [options.options.getBugs]
     */
    getLastExecutionResult(options: ApiTypes.RequestOptions & {
        testplanid: string | number;
        testcaseid?: string;
        testcaseexternalid?: string;
        platformid?: number;
        platformname?: string;
        buildid?: number;
        buildname?: string;
        options?: {
            getBugs?: boolean;
        };
    }): Promise<ApiTypes.ExecutionResult[]>;
    /**
     * Delete an execution
     *
     * @param options
     * @param options.executionid
     */
    deleteExecution(options: ApiTypes.RequestOptions & {
        executionid: number;
    }): Promise<ApiTypes.BasicResultResponse[]>;
    /**
     * Gets a set of EXECUTIONS for a particular testcase on a test plan.
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param [options.platformid] Platform id.
     * @param [options.platformname] Platform name.
     * @param [options.buildid] Build id number.
     * @param [options.buildname] Build name.
     * @param [options.options] options['getOrderDescending'] false(=ascending,default)
     */
    getExecutionSet(options: ApiTypes.RequestOptions & {
        testplanid: number;
        testcaseid?: string;
        testcaseexternalid?: string;
        platformid?: number;
        platformname?: string;
        buildid?: number;
        buildname?: string;
        options?: number;
    }): Promise<Record<string, ApiTypes.ExecutionResult>>;
    /**
     * Gets ALL EXECUTIONS for a particular testcase on a test plan.
     * If there are no filter criteria regarding platform and build,
     * result will be get WITHOUT checking for a particular platform and build.
     *
     * @param options Options
     * @param options.testplanid
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param [options.platformid] Platform id. If not present and Test Case has platforms, platformname must be present.
     * @param [options.platformname] Platform name. If not present and Test Case has platforms, platformid must be present.
     * @param [options.buildid] Build id number. If this and buildname are not specified, the latest build will be used.
     * @param [options.buildname] Build name. If not present, buildid must be present.
     * @param [options.options] options['getBugs'] = true / false
     * @param [options.options.getBugs] Get, or not, an array of bugs
     */
    getAllExecutionsResults(options: ApiTypes.RequestOptions & {
        testplanid: number;
        testcaseid?: string;
        testcaseexternalid?: string;
        platformid?: number;
        platformname?: string;
        buildid?: number;
        buildname?: string;
        options?: number;
    }): Promise<Record<number | string, ApiTypes.ExecutionResult>>;
    /**
     * Get Issue Tracker System by name
     *
     * @param options Options
     * @param options.itsname Issue Tracker System name
     */
    getIssueTrackerSystem(options: ApiTypes.RequestOptions & {
        itsname: string;
    }): Promise<ApiTypes.IssueTracker>;
    /**
     * @see {@see sayHello}
     */
    ping(): Promise<string>;
    /**
     * Lets you see if the server is up and running
     */
    sayHello(): Promise<string>;
    /**
     * Repeats a message back
     *
     * @param options
     * @param options.str String to be said
     */
    repeat(options: ApiTypes.RequestOptions & {
        str: string;
    }): Promise<string>;
    /**
     * Returns the current TestLink version
     */
    testLinkVersion(): Promise<string>;
    /**
     * Gives basic information about the API
     */
    about(): Promise<string>;
    /**
     * Check if Developer Key exists.
     *
     * @param options
     * @param [options.devKey] TestLink API key. If not specified, the devKey used in constructor will be used.
     */
    checkDevKey(options?: ApiTypes.RequestOptions & {
        devKey?: string;
    }): Promise<boolean>;
    /**
     * Turn on/off testMode. This method is meant primarily for testing and debugging during development
     *
     * @param options
     * @param options.testmode
     */
    setTestMode(options?: ApiTypes.RequestOptions & {
        testmode: boolean;
    }): Promise<boolean>;
    /**
     * Gets attachments for specified test case.
     *
     * @param options Options
     * @param options.nodeid can be just a single node or an array of INTERNAL(DB) ID
     */
    getFullPath(options: ApiTypes.RequestOptions & {
        nodeid?: (string | number)[] | string | number;
    }): Promise<Record<number, string[]>>;
    /**
     * Creates a platform
     *
     * @param options Options
     * @param options.testprojectname Test project name
     * @param options.platformname New platform name
     * @param options.notes New platform description
     */
    createPlatform(options: ApiTypes.RequestOptions & {
        testprojectname: string;
        platformname: string;
        notes: string;
    }): Promise<ApiTypes.StatusResponse>;
    /**
     * Gets a list of platforms within a project
     *
     * @param options Options
     * @param options.testprojectid Project ID
     */
    getProjectPlatforms(options: ApiTypes.RequestOptions & {
        testprojectid: string | number;
    }): Promise<Record<number, string>>;
    /**
     * Returns the list of platforms associated to a given test plan
     *
     * @param options Options
     * @param options.testplanid
     */
    getTestPlanPlatforms(options: ApiTypes.RequestOptions & {
        testplanid: number;
    }): Promise<ApiTypes.Platform[]>;
    /**
     * Gets a list of all projects
     */
    getProjects(): Promise<ApiTypes.Project[]>;
    /**
     * Create Test Project
     *
     * @param options
     * @param options.testprojectname New Project name
     * @param options.testcaseprefix New Project prefix
     * @param [options.notes] New Project description
     * @param [options.options] The new Project options
     * @param [options.options.requirementsEnabled] Enable, or not requirements
     * @param [options.options.testPriorityEnabled] Enable, or not test priority
     * @param [options.options.automationEnabled] Enable, or not automation
     * @param [options.options.inventoryEnabled] Enable, or not inventory
     * @param [options.active] Set Project as active or not
     * @param [options.public] Set Project as public or not
     * @param [options.itsname] Issue Tracker name
     * @param [options.itsenabled] Issue Tracker enabled or not
     */
    createTestProject(options: ApiTypes.RequestOptions & {
        testprojectname: string;
        testcaseprefix: string;
        notes?: string;
        options?: {
            requirementsEnabled?: boolean;
            testPriorityEnabled?: boolean;
            automationEnabled?: boolean;
            inventoryEnabled?: boolean;
        };
        active?: boolean;
        public?: boolean;
        itsname?: string;
        itsenabled?: boolean;
    }): Promise<ApiTypes.ResultResponse[]>;
    /**
     * Delete a test project and all related link to other items
     *
     * @param options
     * @param options.prefix Project prefix
     */
    deleteTestProject(options: ApiTypes.RequestOptions & {
        prefix: string;
    }): Promise<ApiTypes.StatusResponse[]>;
    /**
     * Gets a list of keywords within a project
     *
     * @param options
     * @param options.testprojectid Project id
     */
    getProjectKeywords(options: ApiTypes.RequestOptions & {
        testprojectid: string | number;
    }): Promise<Record<number, string>[]>;
    /**
     * Gets info about target test project
     *
     * @param options
     * @param options.testprojectname Project name
     */
    getTestProjectByName(options: ApiTypes.RequestOptions & {
        testprojectname: string;
    }): Promise<ApiTypes.Project>;
    /**
     * Gets a Custom Field of a Requirement Specification in Design Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.reqspecid: Requirement Specification id
     */
    getReqSpecCustomFieldDesignValue(options: ApiTypes.RequestOptions & {
        customfieldname: string;
        testprojectid: string | number;
        reqspecid: string | number;
    }): Promise<ApiTypes.CustomField>;
    /**
     * Gets a Custom Field of a Requirement in Design Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.requirementid: Requirement id
     */
    getRequirementCustomFieldDesignValue(options: ApiTypes.RequestOptions & {
        customfieldname: string;
        testprojectid: string | number;
        requirementid: string | number;
    }): Promise<ApiTypes.CustomField>;
    /**
     * Get requirements
     *
     * @param options Options
     * @param options.testprojectid Project id
     * @param [options.testplanid] Test Plan id
     * @param [options.platformid] Platform id. Mandatory if project has platforms
     *
     */
    getRequirements(options: ApiTypes.RequestOptions & {
        testprojectid: string | number;
        testplanid?: string | number;
        platformid?: string | number;
    }): Promise<ApiTypes.Requirement[]>;
    /**
     * Get requirement coverage. Retrieve the test cases associated to a requirement
     *
     * @param options Options
     * @param options.testprojectid Project id
     * @param options.requirementdocid Requirement doc id
     *
     */
    getReqCoverage(options: ApiTypes.RequestOptions & {
        testprojectid: string | number;
        requirementdocid: string | number;
    }): Promise<ApiTypes.RequirementCoverage[]>;
    /**
     * Report a Test Case result
     *
     * @param options Options.
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param options.testplanid TestPlan id to associate with.
     * @param options.status Execution status
     * @param options.steps Array of steps.
     * @param options.steps[].step_number Step number.
     * @param options.steps[].result Step execution result
     * @param options.steps[].notes Step execution notes.
     * @param [options.buildid] Build id number. If this and buildname are not specified, the latest build will be used.
     * @param [options.buildname] Build name. If this and buildid are not specified, the latest build will be used.
     * @param [options.notes] Execution notes.
     * @param [options.execduration] Execution duration in minutes.
     * @param [options.guess=true] Defining whether to guess optinal params or require them explicitly, default is true (guess by default).
     * @param [options.bugid] Bug id in the configured tracker system.
     * @param [options.platformid] Platform id, if not present platformname must be.
     * @param [options.platformname] Platform id, if not present platformid must be.
     * @param [options.customfields] Map containing a key-value object with custom fields.
     * @param [options.overwrite] Overwrite, or not, the last execution if exists.
     * @param [options.user] TestLink user name who executed the test.
     * @param [options.timestamp] If not present, current time will be used. (Format: YYYY-MM-DD HH:MM:SS).
     */
    reportTCResult(options: ApiTypes.RequestOptions & {
        testcaseid?: string;
        testcaseexternalid?: string;
        testplanid: number;
        status: ExecutionStatus;
        steps: ApiTypes.StepResult[];
        buildid?: number;
        buildname?: string;
        notes?: string;
        execduration?: number;
        guess?: boolean;
        bugid?: string;
        platformid?: string;
        platformname?: string;
        customfields?: ApiTypes.CustomField[];
        overwrite?: boolean;
        user?: string;
        timestamp?: string;
    }): Promise<ApiTypes.BasicResultResponse[]>;
    /**
     * @see {@see reportTCResult}
     * @param options @see {@see reportTCResult#options}
     */
    setTestCaseExecutionResult(options: ApiTypes.RequestOptions & {
        testcaseid?: string;
        testcaseexternalid?: string;
        testplanid: number;
        status: ExecutionStatus;
        steps: ApiTypes.StepResult[];
        buildid?: number;
        buildname?: string;
        notes?: string;
        execduration?: number;
        guess?: boolean;
        bugid?: string;
        platformid?: string;
        platformname?: string;
        customfields?: ApiTypes.CustomField[];
        overwrite?: boolean;
        user?: string;
        timestamp?: string;
    }): Promise<ApiTypes.BasicResultResponse[]>;
    /**
     * Creates a TestCase
     *
     * @param options Options
     * @param options.testcasename New TestCase name
     * @param options.testsuiteid Parent TestSuite id
     * @param options.testprojectid Project id
     * @param options.authorlogin User name to associate TestCase
     * @param options.summary TestCase description
     * @param options.steps Array of steps.
     * @param options.steps[].step_number Step's index number
     * @param options.steps[].actions The step text action (aka description)
     * @param [options.steps[].expected_results] The expected result when the step is executed
     * @param options.steps[].execution_type Execution type
     * @param [options.importance] Importance of TestCase
     * @param [options.executiontype]
     * @param [options.order]
     * @param [options.internalid] Do not use
     * @param [options.checkduplicatedname] Check if the given name belongs to another TestCase
     * @param [options.actiononduplicatedname] Action on duplicated name
     * @param [options.status]
     * @param [options.estimatedexecduration] Estimated execution time, in minutes.
     */
    createTestCase(options: ApiTypes.RequestOptions & {
        testcasename: string;
        testsuiteid: number;
        testprojectid: number;
        authorlogin: string;
        summary: string;
        steps: ApiTypes.Step[];
        importance?: ImportanceLevel;
        executiontype?: ExecutionType;
        order?: number;
        internalid?: number;
        checkduplicatedname?: string;
        actiononduplicatedname?: ActionOnDuplicate;
        status?: TestCaseStatus;
        estimatedexecduration?: number;
    }): Promise<ApiTypes.ResultResponse[]>;
    /**
     * Create or update steps
     *
     * @param options Options
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.version] If not provided, the last ACTIVE version will be used, if all versions are INACTIVE, then latest version will be used.
     * @param options.action Action to be done
     * @param options.steps Array of steps.
     * @param options.steps[].step_number Step's index number
     * @param options.steps[].actions The step text action (aka description)
     * @param [options.steps[].expected_results] The expected result when the step is executed
     * @param options.steps[].execution_type Execution type
     */
    createTestCaseSteps(options: ApiTypes.RequestOptions & {
        testcaseexternalid?: string;
        testcaseid?: string | number;
        version?: string | number;
        action: StepAction;
        steps: ApiTypes.Step[];
    }): Promise<ApiTypes.TestCaseSteps>;
    /**
     * Delete Test Case steps
     *
     * @param options Options
     * @param options.testcaseexternalid The Test Case external id
     * @param [options.version] The Test Case version. If not provided last ACTIVE version will be used
     * @param options.steps Array of steps.
     * @param options.steps[].step_number Step's index number
     * @param options.steps[].actions The step text action (aka description)
     * @param [options.steps[].expected_results] The expected result when the step is executed
     * @param options.steps[].execution_type Execution type
     */
    deleteTestCaseSteps(options: ApiTypes.RequestOptions & {
        testcaseexternalid: string;
        version?: string | number;
        steps: number[];
    }): Promise<ApiTypes.TestCaseStepsSimple>;
    /**
     * List test cases within a test suite
     *
     * @param options Options
     * @param options.testsuiteid
     * @param [options.deep=true] If set to false, fetch only from top level Test Suite
     * @param [options.details="simple"] Valid values are "simple and "full". On "full" summary,steps & expected_results are also represented.
     * @param [options.getkeywords=false] Get, or not, keywords
     */
    getTestCasesForTestSuite(options: ApiTypes.RequestOptions & {
        testsuiteid: number;
        deep?: boolean;
        details?: Details;
        getkeywords?: boolean;
    }): Promise<ApiTypes.TestCaseTable[]>;
    /**
     * List test cases linked to a test plan
     *
     * @param options Options
     * @param options.testplanid Test Plan id.
     * @param [options.buildid] Build id.
     * @param [options.platformid] Platform id.
     * @param [options.testcaseid] Test Case id.
     * @param [options.keywordid] Keyword id. If not present, keywords will be queried.
     * @param [options.keywords] Keyword name. If not present, keywordid will be queried
     * @param [options.executed]
     * @param [options.assignedto]
     * @param [options.executestatus]
     * @param [options.executiontype]
     * @param [options.getstepinfo] - default false
     * @param [options.details="full"] Valid values are "simple and "full". On "full" summary,steps & expected_results are also represented.
     */
    getTestCasesForTestPlan(options: ApiTypes.RequestOptions & {
        testplanid: number;
        buildid?: number;
        platformid?: number;
        testcaseid?: number;
        keywordid?: string;
        keywords?: string;
        executed?: boolean;
        assignedto?: number;
        executestatus?: ExecutionStatus;
        executiontype?: ExecutionType;
        getstepinfo?: boolean;
        details?: Details;
    }): Promise<Record<number, Record<number, ApiTypes.TestCaseAlt>>>;
    /**
     * Find a test case by its name (Note. Case sensitive)
     *
     * No results will be returned if there are test cases with the same name that match the criteria provided.
     *
     * @param options
     * @param options.testcasename Test Case name
     * @param [options.testsuitename] Test Suite name
     * @param [options.testprojectname] Project name
     * @param [options.testcasepathname] Test Case path
     *                                             (Full test case path name, starts with test project name,
     *                                             use pieces separator -> :: -> default value of getByPathName())
     */
    getTestCaseIDByName(options: ApiTypes.RequestOptions & {
        testcasename: string;
        testsuitename?: string;
        testprojectname?: string;
        testcasepathname?: string;
    }): Promise<ApiTypes.TestCaseSimple[]>;
    /**
     * Gets value of a Custom Field with scope='design' for a given Test case
     *
     * @param options Options
     *
     * @param options Options
     * @param options.testcaseexternalid: Test Case external id
     * @param options.version: Version number
     * @param options.testprojectid: Project id
     * @param options.customfieldname: Custom field name
     * @param [options.details=value] Details format
     *                                          "value": Returns just the value
     *                                          "simple": value plus custom field name, label, and type (as code)
     *                                          "full": Returns a map with all custom field definition plus value and internal test case id
     */
    getTestCaseCustomFieldDesignValue(options: ApiTypes.RequestOptions & {
        testcaseexternalid: string;
        version: string | number;
        testprojectid: string | number;
        customfieldname: string;
        details?: Details;
    }): Promise<ApiTypes.CustomField | ApiTypes.CustomFieldSimple | string>;
    /**
     * Gets a Custom Field of a Test Case in Execution Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.executionid: Execution id
     * @param options.version: Test Case version NUMBER
     * @param options.testplanid: Test Plan id
     */
    getTestCaseCustomFieldExecutionValue(options: ApiTypes.RequestOptions & {
        customfieldname: string;
        testprojectid: number;
        executionid: number;
        version: number;
        testplanid: number;
    }): Promise<ApiTypes.CustomField>;
    /**
     * Gets a Custom Field of a Test Case in Test Plan Design Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.version: Test Case version id
     * @param options.testplanid: Test Plan id
     * @param options.linkid: Link id (important!)
     */
    getTestCaseCustomFieldTestPlanDesignValue(options: ApiTypes.RequestOptions & {
        customfieldname: string;
        testprojectid: number;
        version: number;
        testplanid: number;
        linkid: number;
    }): Promise<ApiTypes.CustomField>;
    /**
     * Gets attachments for specified test case.
     *
     * @param options Options
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     */
    getTestCaseAttachments(options: ApiTypes.RequestOptions & {
        testcaseid?: string;
        testcaseexternalid?: string;
    }): Promise<Record<number | string, ApiTypes.Attachment>>;
    /**
     * Gets Test Case
     *
     * @param options Options
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param [options.version] Test Case version.
     */
    getTestCase(options: ApiTypes.RequestOptions & {
        testcaseid?: string;
        testcaseexternalid?: string;
        version?: string;
    }): Promise<ApiTypes.TestCase[]>;
    /**
     * Update value of Custom Field with scope='design' for a given Test case
     *
     * @param options Options
     *
     * @param options Options
     * @param options.testcaseexternalid:  Test Case external id
     * @param options.version: Version number
     * @param options.testprojectid: Project id
     * @param options.customfields Map containing a key-value object with custom fields.
     */
    updateTestCaseCustomFieldDesignValue(options: ApiTypes.RequestOptions & {
        testcaseexternalid: string;
        version: string | number;
        testprojectid: string | number;
        customfields?: Record<number, string>;
    }): Promise<string>;
    /**
     * Update an existing test case
     * Not all test case attributes will be able to be updated using this method
     * See details below
     *
     * @param options Options
     * @param options.testcaseexternalid format PREFIX-NUMBER
     * @param [options.version] version NUMBER (human readable)
     * @param [options.testcasename]
     * @param [options.summary]
     * @param [options.preconditions]
     * @param [options.steps] Array of steps.
     * @param options.steps[].step_number Step's index number
     * @param options.steps[].actions The step text action (aka description)
     * @param [options.steps[].expected_results] The expected result when the step is executed
     * @param options.steps[].execution_type Execution type
     * @param [options.importance] Importance of TestCase
     * @param [options.executiontype]
     * @param [options.status] Current Test Case status (final, future, obsolete, draft, ...)
     * @param [options.estimatedexecduration]
     * @param [options.user] - login name used as updater
     */
    updateTestCase(options: ApiTypes.RequestOptions & {
        testcaseexternalid: string;
        version?: number;
        testcasename?: string;
        summary?: string;
        preconditions?: string;
        steps?: {
            step_number: number;
            actions: string;
            expected_results?: string;
            execution_type: ExecutionType;
        };
        importance?: ImportanceLevel;
        executiontype?: number;
        status?: TestCaseStatus;
        estimatedexecduration?: number;
        user?: string;
    }): Promise<ApiTypes.BasicResultResponse>;
    /**
     * Update execution type for a test case version
     *
     * @param options Options
     * @param options.testcaseexternalid Test Case external id
     * @param options.version Version number
     * @param options.testprojectid Project ID
     * @param options.executiontype
     *
     */
    setTestCaseExecutionType(options: ApiTypes.RequestOptions & {
        testcaseexternalid: string;
        version: string | number;
        testprojectid: string | number;
        executiontype: ExecutionType;
    }): Promise<ApiTypes.TestCase>;
    /**
     * Assign a Test Case execution
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     * @param options.testcaseexternalid Test Case external id
     * @param [options.buildid] Buid id. If not present, buildname must be present.
     * @param [options.buildname] Build name. If not present, buildid must be present.
     * @param [options.platformid] Platform id. If not present and Test Case has platforms, platformname must be present.
     * @param [options.platformname] Platform name. If not present and Test Case has platforms, platformid must be present.
     * @param options.user User name
     */
    assignTestCaseExecutionTask(options: ApiTypes.RequestOptions & {
        testplanid: string | number;
        testcaseexternalid: string;
        buildid?: string | number;
        buildname?: string;
        platformid?: string | number;
        platformname?: string;
        user: string;
    }): Promise<ApiTypes.AssignExecutionResult>;
    /**
     * Unassign a Test Case execution
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     * @param options.testcaseexternalid Test Case external id
     * @param [options.buildid] Buid id. If not present, buildname must be present.
     * @param [options.buildname] Build name. If not present, buildid must be present.
     * @param [options.platformid] Platform id. If not present and Test Case has platforms, platformname must be present.
     * @param [options.platformname] Platform name. If not present and Test Case has platforms, platformid must be present.
     * @param options.user User name
     */
    unassignTestCaseExecutionTask(options: ApiTypes.RequestOptions & {
        testplanid: string | number;
        testcaseexternalid: string;
        buildid?: string | number;
        buildname?: string;
        platformid?: string | number;
        platformname?: string;
        user: string;
    }): Promise<ApiTypes.AssignExecutionResult>;
    /**
     * Add keywords to TestCase
     *
     * @param options Options
     * @param options.keywords: Array with TestCase external id as key E.g: {keywords: ["MF-123": ["keywordA", "keywordB"]]}
     */
    addTestCaseKeywords(options: ApiTypes.RequestOptions & {
        keywords: Record<string, string[]>;
    }): Promise<ApiTypes.ValidKeywords>;
    /**
     * Remove keywords to TestCase
     *
     * @param options Options
     * @param options.keywords: Array with TestCase external id as key E.g: {keywords: ["MF-123": ["keywordA", "keywordB"]]}
     */
    removeTestCaseKeywords(options: ApiTypes.RequestOptions & {
        keywords: Record<string, string[]>;
    }): Promise<ApiTypes.ValidKeywords>;
    /**
     * Set a Test Suite for a Test Case
     *
     * @param options Options
     * @param options.testcaseexternalid Test Case external id
     * @param options.testsuiteid Test Suite id
     */
    setTestCaseTestSuite(options: ApiTypes.RequestOptions & {
        testcaseexternalid: string;
        testsuiteid: number;
    }): Promise<ApiTypes.BasicResultResponse[]>;
    /**
     * Create a Test Plan
     *
     * @param options Options.
     * @param options.testplanname Test Plan name.
     * @param [options.testprojectname] Associated project name. If not specified, prefix must be.
     * @param [options.prefix] Project prefix. If not specified, testprojectname must be.
     * @param [options.notes] Test Plan description
     * @param [options.active=true]
     * @param [options.public=true]
     */
    createTestPlan(options: ApiTypes.RequestOptions & {
        testplanname: string;
        testprojectname?: string;
        prefix?: string;
        notes?: string;
        active?: boolean;
        public?: boolean;
    }): Promise<ApiTypes.ResultResponse[]>;
    /**
     * Delete a test plan and all related link to other items
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     */
    deleteTestPlan(options: ApiTypes.RequestOptions & {
        testplanid: number;
    }): Promise<ApiTypes.ResultResponse[]>;
    /**
     * Add a test case version to a test plan
     *
     * @param options Options
     * @param options.testprojectid Project id
     * @param options.testplanid Test Plan id
     * @param options.testcaseexternalid Test Case external id
     * @param options.version Test case version
     * @param [options.platformid] Only if  test plan has no platforms
     * @param [options.executionorder]
     * @param [options.urgency] Importance of TestCase
     * @param [options.overwrite]
     */
    addTestCaseToTestPlan(options: ApiTypes.RequestOptions & {
        testprojectid: string | number;
        testplanid: string | number;
        testcaseexternalid: string;
        version: string | number;
        platformid?: string | number;
        executionorder?: string;
        urgency?: ImportanceLevel;
        overwrite?: boolean;
    }): Promise<ApiTypes.FeatureResponse>;
    /**
     * Add Platform to Test Plan
     *
     * @param options Options
     * @param options.testplanid
     * @param options.platformname
     */
    addPlatformToTestPlan(options: ApiTypes.RequestOptions & {
        testplanid: number;
        platformname: string;
    }): Promise<ApiTypes.LinkResponse>;
    /**
     * Remove Platform from Test Plan
     *
     * @param options Options
     * @param options.testplanid
     * @param options.platformname
     */
    removePlatformFromTestPlan(options: ApiTypes.RequestOptions & {
        testplanid: number;
        platformname: string;
    }): Promise<ApiTypes.LinkResponse>;
    /**
     * Gets a list of test plans within a project
     *
     * @param options Options
     * @param options.testprojectid Project ID
     */
    getProjectTestPlans(options: ApiTypes.RequestOptions & {
        testprojectid: number;
    }): Promise<ApiTypes.TestPlan[]>;
    /**
     * Gets info about target test project
     *
     * @param options Options
     * @param options.testprojectname Project name
     * @param options.testplanname Test Plan name
     */
    getTestPlanByName(options: ApiTypes.RequestOptions & {
        testprojectname: string;
        testplanname: string;
    }): Promise<ApiTypes.TestPlan[]>;
    /**
     * Gets the summarized results grouped by platform.
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     */
    getTotalsForTestPlan(options: ApiTypes.RequestOptions & {
        testplanid: number;
    }): Promise<ApiTypes.TestPlanTotals>;
    /**
     * Gets a Custom Field of a Test Plan in Design Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.testplanid: Test Plan id
     */
    getTestPlanCustomFieldDesignValue(options: ApiTypes.RequestOptions & {
        customfieldname: string;
        testprojectid: number;
        testplanid: number;
    }): Promise<ApiTypes.CustomField>;
    /**
     * Create a TestSuite
     *
     * @param options Options
     * @param [options.testprojectid] Project to contains TestSuite
     * @param [options.prefix] Project prefix to contains TestSuite
     * @param options.testsuitename New Test Suite name
     * @param [options.details] New Test Suite description
     * @param [options.parentid] The parent TestSuite id, if not provided, will be created as top level.
     * @param [options.order] Order inside parent container
     * @param [options.checkduplicatedname] Check if a Test Suite with the same name exists
     * @param [options.actiononduplicatedname] Action if the TestSuite name exists, and checkduplicatedname is set to true
     */
    createTestSuite(options: ApiTypes.RequestOptions & {
        testprojectid?: string | number;
        prefix?: string;
        testsuitename: string;
        details?: string;
        parentid?: number;
        order?: number;
        checkduplicatedname?: number;
        actiononduplicatedname?: ActionOnDuplicate;
    }): Promise<ApiTypes.ResultResponse[]>;
    /**
     * List test suites within a test plan alphabetically
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     */
    getTestSuitesForTestPlan(options: ApiTypes.RequestOptions & {
        testplanid: number;
    }): Promise<ApiTypes.TestSuite[]>;
    /**
     * Get list of TestSuites which are DIRECT children of a given TestSuite
     *
     * @param options Options
     * @param options.testsuiteid Test Suite id.
     */
    getTestSuitesForTestSuite(options: ApiTypes.RequestOptions & {
        testsuiteid: number;
    }): Promise<Record<number, ApiTypes.TestSuite> | ApiTypes.TestSuite>;
    /**
     * Gets a Custom Field of a Test Suite in Design Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.testsuiteid: Test Suite id
     */
    getTestSuiteCustomFieldDesignValue(options: ApiTypes.RequestOptions & {
        customfieldname: string;
        testprojectid: number;
        testsuiteid: number;
    }): Promise<ApiTypes.CustomField>;
    /**
     * Get set of test suites AT TOP LEVEL of tree on a Test Project
     *
     * @param options Options
     * @param options.testprojectid Project id
     */
    getFirstLevelTestSuitesForTestProject(options: ApiTypes.RequestOptions & {
        testprojectid: string | number;
    }): Promise<ApiTypes.TestSuite[]>;
    /**
     * Return a TestSuite by ID
     *
     * @param options Options
     * @param options.testsuiteid
     */
    getTestSuiteByID(options: ApiTypes.RequestOptions & {
        testsuiteid: number | string;
    }): Promise<ApiTypes.TestSuite>;
    /**
     * Update value of Custom Field with scope='design' for a given Test Suite
     *
     * @param options Options
     *
     * @param options.testsuiteid Test Suite id
     * @param options.testprojectid Project id
     * @param options.customfields Map containing a key-value object with custom fields. (Note the Key should be the CF id, not the name)
     */
    updateTestSuiteCustomFieldDesignValue(options: ApiTypes.RequestOptions & {
        testsuiteid: string | number;
        testprojectid: string | number;
        customfields: Record<string | number, string>;
    }): Promise<ApiTypes.StatusResponse[]>;
    /**
     * Returns all test suites inside target test project with target name
     *
     * @param options Options
     * @param options.testsuitename
     * @param options.prefix
     */
    getTestSuite(options: ApiTypes.RequestOptions & {
        testsuitename: string;
        prefix: string;
    }): Promise<ApiTypes.TestSuite[]>;
    /**
     * Update a test suite
     *
     * @param options Options
     * @param [options.testprojectid] Project id. Madatory if prefix is not present
     * @param [options.prefix] Project prefix. Madatory if testprojectid is not present
     * @param options.testsuiteid The ID of the TS to be updated.
     * @param [options.testsuitename] New Test Suite name.
     * @param [options.details] New Test Suite description.
     * @param [options.order] Order inside parent container.
     */
    updateTestSuite(options: ApiTypes.RequestOptions & {
        testprojectid?: string | number;
        prefix?: string;
        testsuiteid: string | number;
        testsuitename?: string;
        details?: string;
        order?: number;
    }): Promise<ApiTypes.ResultResponse[]>;
    /**
     * Gets user data by login name
     *
     * @param options
     * @param options.user User name
     */
    getUserByLogin(options: ApiTypes.RequestOptions & {
        user: string;
    }): Promise<ApiTypes.User[]>;
    /**
     * Gets user data by ID
     *
     * @param options Options
     * @param options.userid User id
     */
    getUserByID(options: ApiTypes.RequestOptions & {
        userid: string | number;
    }): Promise<ApiTypes.User[]>;
    /**
     * Checks if an user exists
     *
     * @param options.user User name
     */
    doesUserExist(options: ApiTypes.RequestOptions & {
        user: string;
    }): Promise<boolean>;
    /**
     * Perform a request to XML-RPC TestLink API.
     *
     * @param method - Method name to be invoked in TestLink.
     * @param options needed by the method to perform an action.
     * @param options.apiKey - API key to be used.
     * @param options.devKey - Same as `options.apiKey`.
     * @returns Promise object represents the request response.
     */
    _performRequest(method: string, { apiKey, devKey, ...options }?: ApiTypes.RequestOptions): Promise<any>;
}
export * as Constants from './constants';
