"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Constants = void 0;
/**
 * @license
 * This file is part of testlink-xmlrpc.
 *
 * testlink-xmlrpc is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * testlink-xmlrpc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with testlink-xmlrpc. If not, see <https://www.gnu.org/licenses/>.
 *
 * @author Luis Zurro de Cos <luiszurrodecos@gmail.com>
 */
const xmlrpc_1 = __importDefault(require("xmlrpc"));
const decorators_1 = require("./decorators");
class TestLink {
    /**
     * Class constructor
     *
     * @param options - Configuration parameters
     * @param options.secure - Use or not secure connection. If set to true, use http and port 443 if a port was not defined else uses http and port 80.
     * @param options.host - Hostname or IP where TestLink is hosted.
     * @param options.port - Hostname or IP where TestLink is hosted.
     * @param options.rpcPath - Path to TestLink rpc client.
     * @param options.apiKey - The api key to interact with TestLink.
     * @param autoConnect - If set to true, the connection is established on constructor, else a call to connect() method is required.
     */
    constructor({ secure = false, host = 'localhost', port = secure ? 443 : 80, path = '/', rpcPath = 'lib/api/xmlrpc/v1/xmlrpc.php', apiKey, autoConnect = true, } = {}) {
        this.host = host;
        this.secure = secure;
        this.port = port;
        this.rpcPath = `${path}${path.endsWith('/') ? '' : '/'}${rpcPath}`;
        this.apiKey = apiKey;
        if (autoConnect)
            this.connect();
    }
    /**
     * Establish connection
     */
    connect() {
        const options = { host: this.host, port: this.port, path: this.rpcPath };
        this.rpcClient = this.secure ?
            xmlrpc_1.default.createSecureClient(options) :
            xmlrpc_1.default.createClient(options);
    }
    /* Attachments */
    /**
     * Uploads an attachment for an execution.
     *
     * @param options Options
     * @param options.executionid The Test Case execution id
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadExecutionAttachment(options) {
        return this._performRequest('uploadExecutionAttachment', options);
    }
    /**
     * Uploads an attachment for a Requirement Specification.
     *
     * @param options Options
     * @param options.reqspecid The Requirement Specification ID
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadRequirementSpecificationAttachment(options) {
        return this._performRequest('uploadRequirementSpecificationAttachment', options);
    }
    /**
     * Uploads an attachment for a Requirement.
     *
     * @param options Options
     * @param options.requirementid The Requirement ID
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadRequirementAttachment(options) {
        return this._performRequest('uploadRequirementAttachment', options);
    }
    /**
     * Uploads an attachment for a Test Project.
     *
     * @param options Options
     * @param options.testprojectid The Test Project ID
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadTestProjectAttachment(options) {
        return this._performRequest('uploadTestProjectAttachment', options);
    }
    /**
     * Uploads an attachment for a Test Suite.
     *
     * @param options Options
     * @param options.testsuiteid The Test Suite ID
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadTestSuiteAttachment(options) {
        return this._performRequest('uploadTestSuiteAttachment', options);
    }
    /**
     * Uploads an attachment for a Test Case.
     *
     * @param options Options
     * @param options.testcaseid The Test Case ID
     * @param [options.version] The Test Case version.
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadTestCaseAttachment(options) {
        return this._performRequest('uploadTestCaseAttachment', options);
    }
    /**
     * Uploads an attachment for specified table. You must specify the table that
     * the attachment is connected (nodes_hierarchy, builds, etc) and the foreign
     * key id in this table.
     *
     * @param options Options
     * @param options.fkid Attachment's Foreign Key ID
     * @param options.fktable Attachment's Foreign Key Table
     * @param [options.title] Attachment's title
     * @param [options.description] Attachment's description
     * @param options.filename Attachment's file name (E.g. screenshot.png)
     * @param options.filetype Attachment's mime type (E.g.: image/png)
     * @param options.content Attachment's content in BASE64
     */
    uploadAttachment(options) {
        return this._performRequest('uploadAttachment', options);
    }
    /**
     * Gets attachments for specified test suite.
     *
     * @param options Options
     * @param options.testsuiteid: Test Suite id.
     */
    getTestSuiteAttachments(options) {
        return this._performRequest('getTestSuiteAttachments', options);
    }
    /* Builds */
    /**
     * Creates a new build for a specific test plan
     *
     * @param options Options
     * @param options.testplanid TestPlan id to associate with.
     * @param options.buildname Build name.
     * @param options.buildnotes Build description
     * @param options.active Set if is active
     * @param options.open Set if is open
     * @param options.releasedate Release date in format YYYY-MM-DD
     * @param [options.copytestersfrombuild] Build id to copy from
     */
    createBuild(options) {
        return this._performRequest('createBuild', options);
    }
    /**
     * Close a build
     *
     * @param options Options
     * @param options.buildid Build id.
     */
    closeBuild(options) {
        return this._performRequest('closeBuild', options);
    }
    /**
     * @param options Options
     */
    getExecCountersByBuild(options) {
        return this._performRequest('getExecCountersByBuild', options);
    }
    /**
     * Gets a list of builds within a test plan
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     */
    getBuildsForTestPlan(options) {
        return this._performRequest('getBuildsForTestPlan', options);
    }
    /**
     * Gets the latest build by choosing the maximum build id for a specific test plan
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     */
    getLatestBuildForTestPlan(options) {
        return this._performRequest('getLatestBuildForTestPlan', options);
    }
    /**
     * Update value of Custom Field with scope='design' for a given Build
     *
     * @param options Options
     * @param options.buildid Build id
     * @param options.testprojectid Project id
     * @param options.testplanid Test plan id
     * @param options.customfields Map containing a key-value object with custom fields.
     */
    updateBuildCustomFieldsValues(options) {
        return this._performRequest('updateBuildCustomFieldsValues', options);
    }
    /* Executions */
    /**
     * Gets the result of LAST EXECUTION for a particular testcase on a test plan.
     * If there are no filter criteria regarding platform and build,
     * result will be get WITHOUT checking for a particular platform and build.
     *
     * @param options Options
     * @param options.testplanid Test Plan id.
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param [options.platformid] Platform id number.
     * @param [options.platformname] Platform name.
     * @param [options.buildid] Build id number.
     * @param [options.buildname] Build name.
     * @param [options.options]
     * @param [options.options.getBugs]
     */
    getLastExecutionResult(options) {
        return this._performRequest('getLastExecutionResult', options);
    }
    /**
     * Delete an execution
     *
     * @param options
     * @param options.executionid
     */
    deleteExecution(options) {
        return this._performRequest('deleteExecution', options);
    }
    /**
     * Gets a set of EXECUTIONS for a particular testcase on a test plan.
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param [options.platformid] Platform id.
     * @param [options.platformname] Platform name.
     * @param [options.buildid] Build id number.
     * @param [options.buildname] Build name.
     * @param [options.options] options['getOrderDescending'] false(=ascending,default)
     */
    getExecutionSet(options) {
        return this._performRequest('getExecutionSet', options);
    }
    /**
     * Gets ALL EXECUTIONS for a particular testcase on a test plan.
     * If there are no filter criteria regarding platform and build,
     * result will be get WITHOUT checking for a particular platform and build.
     *
     * @param options Options
     * @param options.testplanid
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param [options.platformid] Platform id. If not present and Test Case has platforms, platformname must be present.
     * @param [options.platformname] Platform name. If not present and Test Case has platforms, platformid must be present.
     * @param [options.buildid] Build id number. If this and buildname are not specified, the latest build will be used.
     * @param [options.buildname] Build name. If not present, buildid must be present.
     * @param [options.options] options['getBugs'] = true / false
     * @param [options.options.getBugs] Get, or not, an array of bugs
     */
    getAllExecutionsResults(options) {
        return this._performRequest('getAllExecutionsResults', options);
    }
    /* Issue Trackers */
    /**
     * Get Issue Tracker System by name
     *
     * @param options Options
     * @param options.itsname Issue Tracker System name
     */
    getIssueTrackerSystem(options) {
        return this._performRequest('getIssueTrackerSystem', options);
    }
    /* Miscellaneous */
    /**
     * @see {@see sayHello}
     */
    ping() {
        return this._performRequest('ping');
    }
    /**
     * Lets you see if the server is up and running
     */
    sayHello() {
        return this._performRequest('sayHello');
    }
    /**
     * Repeats a message back
     *
     * @param options
     * @param options.str String to be said
     */
    repeat(options) {
        return this._performRequest('repeat', options);
    }
    /**
     * Returns the current TestLink version
     */
    testLinkVersion() {
        return this._performRequest('testLinkVersion');
    }
    /**
     * Gives basic information about the API
     */
    about() {
        return this._performRequest('about');
    }
    /**
     * Check if Developer Key exists.
     *
     * @param options
     * @param [options.devKey] TestLink API key. If not specified, the devKey used in constructor will be used.
     */
    checkDevKey(options) {
        return this._performRequest('checkDevKey', options);
    }
    /**
     * Turn on/off testMode. This method is meant primarily for testing and debugging during development
     *
     * @param options
     * @param options.testmode
     */
    setTestMode(options) {
        return this._performRequest('setTestMode', options);
    }
    /**
     * Gets attachments for specified test case.
     *
     * @param options Options
     * @param options.nodeid can be just a single node or an array of INTERNAL(DB) ID
     */
    getFullPath(options) {
        return this._performRequest('getFullPath', options);
    }
    /* Platforms */
    /**
     * Creates a platform
     *
     * @param options Options
     * @param options.testprojectname Test project name
     * @param options.platformname New platform name
     * @param options.notes New platform description
     */
    createPlatform(options) {
        return this._performRequest('createPlatform', options);
    }
    /**
     * Gets a list of platforms within a project
     *
     * @param options Options
     * @param options.testprojectid Project ID
     */
    getProjectPlatforms(options) {
        return this._performRequest('getProjectPlatforms', options);
    }
    /**
     * Returns the list of platforms associated to a given test plan
     *
     * @param options Options
     * @param options.testplanid
     */
    getTestPlanPlatforms(options) {
        return this._performRequest('getTestPlanPlatforms', options);
    }
    /* Projects */
    /**
     * Gets a list of all projects
     */
    getProjects() {
        return this._performRequest('getProjects');
    }
    /**
     * Create Test Project
     *
     * @param options
     * @param options.testprojectname New Project name
     * @param options.testcaseprefix New Project prefix
     * @param [options.notes] New Project description
     * @param [options.options] The new Project options
     * @param [options.options.requirementsEnabled] Enable, or not requirements
     * @param [options.options.testPriorityEnabled] Enable, or not test priority
     * @param [options.options.automationEnabled] Enable, or not automation
     * @param [options.options.inventoryEnabled] Enable, or not inventory
     * @param [options.active] Set Project as active or not
     * @param [options.public] Set Project as public or not
     * @param [options.itsname] Issue Tracker name
     * @param [options.itsenabled] Issue Tracker enabled or not
     */
    createTestProject(options) {
        return this._performRequest('createTestProject', options);
    }
    /**
     * Delete a test project and all related link to other items
     *
     * @param options
     * @param options.prefix Project prefix
     */
    deleteTestProject(options) {
        return this._performRequest('deleteTestProject', options);
    }
    /**
     * Gets a list of keywords within a project
     *
     * @param options
     * @param options.testprojectid Project id
     */
    getProjectKeywords(options) {
        return this._performRequest('getProjectKeywords', options);
    }
    /**
     * Gets info about target test project
     *
     * @param options
     * @param options.testprojectname Project name
     */
    getTestProjectByName(options) {
        return this._performRequest('getTestProjectByName', options);
    }
    /* Requirements */
    /**
     * Gets a Custom Field of a Requirement Specification in Design Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.reqspecid: Requirement Specification id
     */
    getReqSpecCustomFieldDesignValue(options) {
        return this._performRequest('getReqSpecCustomFieldDesignValue', options);
    }
    /**
     * Gets a Custom Field of a Requirement in Design Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.requirementid: Requirement id
     */
    getRequirementCustomFieldDesignValue(options) {
        return this._performRequest('getRequirementCustomFieldDesignValue', options);
    }
    /**
     * Get requirements
     *
     * @param options Options
     * @param options.testprojectid Project id
     * @param [options.testplanid] Test Plan id
     * @param [options.platformid] Platform id. Mandatory if project has platforms
     *
     */
    getRequirements(options) {
        return this._performRequest('getRequirements', options);
    }
    /**
     * Get requirement coverage. Retrieve the test cases associated to a requirement
     *
     * @param options Options
     * @param options.testprojectid Project id
     * @param options.requirementdocid Requirement doc id
     *
     */
    getReqCoverage(options) {
        return this._performRequest('getReqCoverage', options);
    }
    /* Test Cases */
    /**
     * Report a Test Case result
     *
     * @param options Options.
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param options.testplanid TestPlan id to associate with.
     * @param options.status Execution status
     * @param options.steps Array of steps.
     * @param options.steps[].step_number Step number.
     * @param options.steps[].result Step execution result
     * @param options.steps[].notes Step execution notes.
     * @param [options.buildid] Build id number. If this and buildname are not specified, the latest build will be used.
     * @param [options.buildname] Build name. If this and buildid are not specified, the latest build will be used.
     * @param [options.notes] Execution notes.
     * @param [options.execduration] Execution duration in minutes.
     * @param [options.guess=true] Defining whether to guess optinal params or require them explicitly, default is true (guess by default).
     * @param [options.bugid] Bug id in the configured tracker system.
     * @param [options.platformid] Platform id, if not present platformname must be.
     * @param [options.platformname] Platform id, if not present platformid must be.
     * @param [options.customfields] Map containing a key-value object with custom fields.
     * @param [options.overwrite] Overwrite, or not, the last execution if exists.
     * @param [options.user] TestLink user name who executed the test.
     * @param [options.timestamp] If not present, current time will be used. (Format: YYYY-MM-DD HH:MM:SS).
     */
    reportTCResult(options) {
        return this._performRequest('reportTCResult', options);
    }
    /**
     * @see {@see reportTCResult}
     * @param options @see {@see reportTCResult#options}
     */
    setTestCaseExecutionResult(options) {
        return this._performRequest('setTestCaseExecutionResult', options);
    }
    /**
     * Creates a TestCase
     *
     * @param options Options
     * @param options.testcasename New TestCase name
     * @param options.testsuiteid Parent TestSuite id
     * @param options.testprojectid Project id
     * @param options.authorlogin User name to associate TestCase
     * @param options.summary TestCase description
     * @param options.steps Array of steps.
     * @param options.steps[].step_number Step's index number
     * @param options.steps[].actions The step text action (aka description)
     * @param [options.steps[].expected_results] The expected result when the step is executed
     * @param options.steps[].execution_type Execution type
     * @param [options.importance] Importance of TestCase
     * @param [options.executiontype]
     * @param [options.order]
     * @param [options.internalid] Do not use
     * @param [options.checkduplicatedname] Check if the given name belongs to another TestCase
     * @param [options.actiononduplicatedname] Action on duplicated name
     * @param [options.status]
     * @param [options.estimatedexecduration] Estimated execution time, in minutes.
     */
    createTestCase(options) {
        return this._performRequest('createTestCase', options);
    }
    /**
     * Create or update steps
     *
     * @param options Options
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.version] If not provided, the last ACTIVE version will be used, if all versions are INACTIVE, then latest version will be used.
     * @param options.action Action to be done
     * @param options.steps Array of steps.
     * @param options.steps[].step_number Step's index number
     * @param options.steps[].actions The step text action (aka description)
     * @param [options.steps[].expected_results] The expected result when the step is executed
     * @param options.steps[].execution_type Execution type
     */
    createTestCaseSteps(options) {
        return this._performRequest('createTestCaseSteps', options);
    }
    /**
     * Delete Test Case steps
     *
     * @param options Options
     * @param options.testcaseexternalid The Test Case external id
     * @param [options.version] The Test Case version. If not provided last ACTIVE version will be used
     * @param options.steps Array of steps.
     * @param options.steps[].step_number Step's index number
     * @param options.steps[].actions The step text action (aka description)
     * @param [options.steps[].expected_results] The expected result when the step is executed
     * @param options.steps[].execution_type Execution type
     */
    deleteTestCaseSteps(options) {
        return this._performRequest('deleteTestCaseSteps', options);
    }
    /**
     * List test cases within a test suite
     *
     * @param options Options
     * @param options.testsuiteid
     * @param [options.deep=true] If set to false, fetch only from top level Test Suite
     * @param [options.details="simple"] Valid values are "simple and "full". On "full" summary,steps & expected_results are also represented.
     * @param [options.getkeywords=false] Get, or not, keywords
     */
    getTestCasesForTestSuite(options) {
        return this._performRequest('getTestCasesForTestSuite', options);
    }
    /**
     * List test cases linked to a test plan
     *
     * @param options Options
     * @param options.testplanid Test Plan id.
     * @param [options.buildid] Build id.
     * @param [options.platformid] Platform id.
     * @param [options.testcaseid] Test Case id.
     * @param [options.keywordid] Keyword id. If not present, keywords will be queried.
     * @param [options.keywords] Keyword name. If not present, keywordid will be queried
     * @param [options.executed]
     * @param [options.assignedto]
     * @param [options.executestatus]
     * @param [options.executiontype]
     * @param [options.getstepinfo] - default false
     * @param [options.details="full"] Valid values are "simple and "full". On "full" summary,steps & expected_results are also represented.
     */
    getTestCasesForTestPlan(options) {
        return this._performRequest('getTestCasesForTestPlan', options);
    }
    /**
     * Find a test case by its name (Note. Case sensitive)
     *
     * No results will be returned if there are test cases with the same name that match the criteria provided.
     *
     * @param options
     * @param options.testcasename Test Case name
     * @param [options.testsuitename] Test Suite name
     * @param [options.testprojectname] Project name
     * @param [options.testcasepathname] Test Case path
     *                                             (Full test case path name, starts with test project name,
     *                                             use pieces separator -> :: -> default value of getByPathName())
     */
    getTestCaseIDByName(options) {
        return this._performRequest('getTestCaseIDByName', options);
    }
    /**
     * Gets value of a Custom Field with scope='design' for a given Test case
     *
     * @param options Options
     *
     * @param options Options
     * @param options.testcaseexternalid: Test Case external id
     * @param options.version: Version number
     * @param options.testprojectid: Project id
     * @param options.customfieldname: Custom field name
     * @param [options.details=value] Details format
     *                                          "value": Returns just the value
     *                                          "simple": value plus custom field name, label, and type (as code)
     *                                          "full": Returns a map with all custom field definition plus value and internal test case id
     */
    getTestCaseCustomFieldDesignValue(options) {
        return this._performRequest('getTestCaseCustomFieldDesignValue', options);
    }
    /**
     * Gets a Custom Field of a Test Case in Execution Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.executionid: Execution id
     * @param options.version: Test Case version NUMBER
     * @param options.testplanid: Test Plan id
     */
    getTestCaseCustomFieldExecutionValue(options) {
        return this._performRequest('getTestCaseCustomFieldExecutionValue', options);
    }
    /**
     * Gets a Custom Field of a Test Case in Test Plan Design Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.version: Test Case version id
     * @param options.testplanid: Test Plan id
     * @param options.linkid: Link id (important!)
     */
    getTestCaseCustomFieldTestPlanDesignValue(options) {
        return this._performRequest('getTestCaseCustomFieldTestPlanDesignValue', options);
    }
    /**
     * Gets attachments for specified test case.
     *
     * @param options Options
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     */
    getTestCaseAttachments(options) {
        return this._performRequest('getTestCaseAttachments', options);
    }
    /**
     * Gets Test Case
     *
     * @param options Options
     * @param [options.testcaseid] Test Case id. If not present, testcaseexternalid must be present.
     * @param [options.testcaseexternalid] Test Case external id. If not present, testcaseid must be present.
     * @param [options.version] Test Case version.
     */
    getTestCase(options) {
        return this._performRequest('getTestCase', options);
    }
    /**
     * Update value of Custom Field with scope='design' for a given Test case
     *
     * @param options Options
     *
     * @param options Options
     * @param options.testcaseexternalid:  Test Case external id
     * @param options.version: Version number
     * @param options.testprojectid: Project id
     * @param options.customfields Map containing a key-value object with custom fields.
     */
    updateTestCaseCustomFieldDesignValue(options) {
        return this._performRequest('updateTestCaseCustomFieldDesignValue', options);
    }
    /**
     * Update an existing test case
     * Not all test case attributes will be able to be updated using this method
     * See details below
     *
     * @param options Options
     * @param options.testcaseexternalid format PREFIX-NUMBER
     * @param [options.version] version NUMBER (human readable)
     * @param [options.testcasename]
     * @param [options.summary]
     * @param [options.preconditions]
     * @param [options.steps] Array of steps.
     * @param options.steps[].step_number Step's index number
     * @param options.steps[].actions The step text action (aka description)
     * @param [options.steps[].expected_results] The expected result when the step is executed
     * @param options.steps[].execution_type Execution type
     * @param [options.importance] Importance of TestCase
     * @param [options.executiontype]
     * @param [options.status] Current Test Case status (final, future, obsolete, draft, ...)
     * @param [options.estimatedexecduration]
     * @param [options.user] - login name used as updater
     */
    updateTestCase(options) {
        return this._performRequest('updateTestCase', options);
    }
    /**
     * Update execution type for a test case version
     *
     * @param options Options
     * @param options.testcaseexternalid Test Case external id
     * @param options.version Version number
     * @param options.testprojectid Project ID
     * @param options.executiontype
     *
     */
    setTestCaseExecutionType(options) {
        return this._performRequest('setTestCaseExecutionType', options)
            // The response looks wrong on TestLink as the second items is debug data.
            .then(response => response[0]);
    }
    /**
     * Assign a Test Case execution
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     * @param options.testcaseexternalid Test Case external id
     * @param [options.buildid] Buid id. If not present, buildname must be present.
     * @param [options.buildname] Build name. If not present, buildid must be present.
     * @param [options.platformid] Platform id. If not present and Test Case has platforms, platformname must be present.
     * @param [options.platformname] Platform name. If not present and Test Case has platforms, platformid must be present.
     * @param options.user User name
     */
    assignTestCaseExecutionTask(options) {
        return this._performRequest('assignTestCaseExecutionTask', options);
    }
    /**
     * Unassign a Test Case execution
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     * @param options.testcaseexternalid Test Case external id
     * @param [options.buildid] Buid id. If not present, buildname must be present.
     * @param [options.buildname] Build name. If not present, buildid must be present.
     * @param [options.platformid] Platform id. If not present and Test Case has platforms, platformname must be present.
     * @param [options.platformname] Platform name. If not present and Test Case has platforms, platformid must be present.
     * @param options.user User name
     */
    unassignTestCaseExecutionTask(options) {
        return this._performRequest('unassignTestCaseExecutionTask', options);
    }
    /**
     * Add keywords to TestCase
     *
     * @param options Options
     * @param options.keywords: Array with TestCase external id as key E.g: {keywords: ["MF-123": ["keywordA", "keywordB"]]}
     */
    addTestCaseKeywords(options) {
        return this._performRequest('addTestCaseKeywords', options);
    }
    /**
     * Remove keywords to TestCase
     *
     * @param options Options
     * @param options.keywords: Array with TestCase external id as key E.g: {keywords: ["MF-123": ["keywordA", "keywordB"]]}
     */
    removeTestCaseKeywords(options) {
        return this._performRequest('removeTestCaseKeywords', options);
    }
    /**
     * Set a Test Suite for a Test Case
     *
     * @param options Options
     * @param options.testcaseexternalid Test Case external id
     * @param options.testsuiteid Test Suite id
     */
    setTestCaseTestSuite(options) {
        return this._performRequest('setTestCaseTestSuite', options);
    }
    /* Test Plans */
    /**
     * Create a Test Plan
     *
     * @param options Options.
     * @param options.testplanname Test Plan name.
     * @param [options.testprojectname] Associated project name. If not specified, prefix must be.
     * @param [options.prefix] Project prefix. If not specified, testprojectname must be.
     * @param [options.notes] Test Plan description
     * @param [options.active=true]
     * @param [options.public=true]
     */
    createTestPlan(options) {
        return this._performRequest('createTestPlan', options);
    }
    /**
     * Delete a test plan and all related link to other items
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     */
    deleteTestPlan(options) {
        return this._performRequest('deleteTestPlan', options);
    }
    /**
     * Add a test case version to a test plan
     *
     * @param options Options
     * @param options.testprojectid Project id
     * @param options.testplanid Test Plan id
     * @param options.testcaseexternalid Test Case external id
     * @param options.version Test case version
     * @param [options.platformid] Only if  test plan has no platforms
     * @param [options.executionorder]
     * @param [options.urgency] Importance of TestCase
     * @param [options.overwrite]
     */
    addTestCaseToTestPlan(options) {
        return this._performRequest('addTestCaseToTestPlan', options);
    }
    /**
     * Add Platform to Test Plan
     *
     * @param options Options
     * @param options.testplanid
     * @param options.platformname
     */
    addPlatformToTestPlan(options) {
        return this._performRequest('addPlatformToTestPlan', options);
    }
    /**
     * Remove Platform from Test Plan
     *
     * @param options Options
     * @param options.testplanid
     * @param options.platformname
     */
    removePlatformFromTestPlan(options) {
        return this._performRequest('removePlatformFromTestPlan', options);
    }
    /**
     * Gets a list of test plans within a project
     *
     * @param options Options
     * @param options.testprojectid Project ID
     */
    getProjectTestPlans(options) {
        return this._performRequest('getProjectTestPlans', options);
    }
    /**
     * Gets info about target test project
     *
     * @param options Options
     * @param options.testprojectname Project name
     * @param options.testplanname Test Plan name
     */
    getTestPlanByName(options) {
        return this._performRequest('getTestPlanByName', options);
    }
    /**
     * Gets the summarized results grouped by platform.
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     */
    getTotalsForTestPlan(options) {
        return this._performRequest('getTotalsForTestPlan', options);
    }
    /**
     * Gets a Custom Field of a Test Plan in Design Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.testplanid: Test Plan id
     */
    getTestPlanCustomFieldDesignValue(options) {
        return this._performRequest('getTestPlanCustomFieldDesignValue', options);
    }
    /* Test Suites */
    /**
     * Create a TestSuite
     *
     * @param options Options
     * @param [options.testprojectid] Project to contains TestSuite
     * @param [options.prefix] Project prefix to contains TestSuite
     * @param options.testsuitename New Test Suite name
     * @param [options.details] New Test Suite description
     * @param [options.parentid] The parent TestSuite id, if not provided, will be created as top level.
     * @param [options.order] Order inside parent container
     * @param [options.checkduplicatedname] Check if a Test Suite with the same name exists
     * @param [options.actiononduplicatedname] Action if the TestSuite name exists, and checkduplicatedname is set to true
     */
    createTestSuite(options) {
        return this._performRequest('createTestSuite', options);
    }
    /**
     * List test suites within a test plan alphabetically
     *
     * @param options Options
     * @param options.testplanid Test Plan id
     */
    getTestSuitesForTestPlan(options) {
        return this._performRequest('getTestSuitesForTestPlan', options);
    }
    /**
     * Get list of TestSuites which are DIRECT children of a given TestSuite
     *
     * @param options Options
     * @param options.testsuiteid Test Suite id.
     */
    getTestSuitesForTestSuite(options) {
        return this._performRequest('getTestSuitesForTestSuite', options);
    }
    /**
     * Gets a Custom Field of a Test Suite in Design Scope.
     *
     * @param options Options
     * @param options.customfieldname: Custom field name
     * @param options.testprojectid: Project id
     * @param options.testsuiteid: Test Suite id
     */
    getTestSuiteCustomFieldDesignValue(options) {
        return this._performRequest('getTestSuiteCustomFieldDesignValue', options);
    }
    /**
     * Get set of test suites AT TOP LEVEL of tree on a Test Project
     *
     * @param options Options
     * @param options.testprojectid Project id
     */
    getFirstLevelTestSuitesForTestProject(options) {
        return this._performRequest('getFirstLevelTestSuitesForTestProject', options);
    }
    /**
     * Return a TestSuite by ID
     *
     * @param options Options
     * @param options.testsuiteid
     */
    getTestSuiteByID(options) {
        return this._performRequest('getTestSuiteByID', options);
    }
    /**
     * Update value of Custom Field with scope='design' for a given Test Suite
     *
     * @param options Options
     *
     * @param options.testsuiteid Test Suite id
     * @param options.testprojectid Project id
     * @param options.customfields Map containing a key-value object with custom fields. (Note the Key should be the CF id, not the name)
     */
    updateTestSuiteCustomFieldDesignValue(options) {
        return this._performRequest('updateTestSuiteCustomFieldDesignValue', options);
    }
    /**
     * Returns all test suites inside target test project with target name
     *
     * @param options Options
     * @param options.testsuitename
     * @param options.prefix
     */
    getTestSuite(options) {
        return this._performRequest('getTestSuite', options);
    }
    /**
     * Update a test suite
     *
     * @param options Options
     * @param [options.testprojectid] Project id. Madatory if prefix is not present
     * @param [options.prefix] Project prefix. Madatory if testprojectid is not present
     * @param options.testsuiteid The ID of the TS to be updated.
     * @param [options.testsuitename] New Test Suite name.
     * @param [options.details] New Test Suite description.
     * @param [options.order] Order inside parent container.
     */
    updateTestSuite(options) {
        return this._performRequest('updateTestSuite', options);
    }
    /* Users */
    /**
     * Gets user data by login name
     *
     * @param options
     * @param options.user User name
     */
    getUserByLogin(options) {
        return this._performRequest('getUserByLogin', options);
    }
    /**
     * Gets user data by ID
     *
     * @param options Options
     * @param options.userid User id
     */
    getUserByID(options) {
        return this._performRequest('getUserByID', options);
    }
    /**
     * Checks if an user exists
     *
     * @param options.user User name
     */
    doesUserExist(options) {
        return this._performRequest('doesUserExist', options);
    }
    /* RPC */
    /**
     * Perform a request to XML-RPC TestLink API.
     *
     * @param method - Method name to be invoked in TestLink.
     * @param options needed by the method to perform an action.
     * @param options.apiKey - API key to be used.
     * @param options.devKey - Same as `options.apiKey`.
     * @returns Promise object represents the request response.
     */
    _performRequest(method, _a = {}) {
        var { apiKey, devKey = apiKey || this.apiKey } = _a, options = __rest(_a, ["apiKey", "devKey"]);
        return new Promise((resolve, reject) => {
            if (this.rpcClient) {
                this.rpcClient.methodCall(`tl.${method}`, [Object.assign({ devKey }, options)], (error, value) => {
                    if (error) {
                        return reject(new Error(error));
                    }
                    else if (value.status_ok === 0) {
                        return reject(new Error(value.msg));
                    }
                    else if (Array.isArray(value)) {
                        for (const v of value) {
                            if (Object.prototype.hasOwnProperty.call(v, 'code')) {
                                return reject(new Error(`[${v.code}] ${v.message}`));
                            }
                        }
                    }
                    return resolve(value);
                });
            }
            else {
                reject('RPC Client not initiated.');
            }
        });
    }
}
__decorate([
    (0, decorators_1.MandatoryFields)(['executionid', 'filename', 'filetype', 'content']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "uploadExecutionAttachment", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['reqspecid', 'filename', 'filetype', 'content']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "uploadRequirementSpecificationAttachment", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['requirementid', 'filename', 'filetype', 'content']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "uploadRequirementAttachment", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectid', 'filename', 'filetype', 'content']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "uploadTestProjectAttachment", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testsuiteid', 'filename', 'filetype', 'content']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "uploadTestSuiteAttachment", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testcaseid', 'version', 'filename', 'filetype', 'content']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "uploadTestCaseAttachment", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['fkid', 'fktable', 'filename', 'filetype', 'content']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "uploadAttachment", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testsuiteid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestSuiteAttachments", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid', 'buildname', 'buildnotes', 'active', 'open', 'releasedate']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "createBuild", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['buildid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "closeBuild", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getExecCountersByBuild", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getBuildsForTestPlan", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getLatestBuildForTestPlan", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['buildid', 'testprojectid', 'customfields', 'testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "updateBuildCustomFieldsValues", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid', ['testcaseid', 'testcaseexternalid']]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getLastExecutionResult", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['executionid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "deleteExecution", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid', ['testcaseid', 'testcaseexternalid']]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getExecutionSet", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid', ['testcaseid', 'testcaseexternalid']]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getAllExecutionsResults", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['itsname']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getIssueTrackerSystem", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['str']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "repeat", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testmode']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "setTestMode", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['nodeid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getFullPath", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectname', 'platformname', 'notes']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "createPlatform", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getProjectPlatforms", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestPlanPlatforms", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectname', 'testcaseprefix']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "createTestProject", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['prefix']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "deleteTestProject", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getProjectKeywords", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectname']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestProjectByName", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['customfieldname', 'testprojectid', 'reqspecid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getReqSpecCustomFieldDesignValue", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['customfieldname', 'testprojectid', 'requirementid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getRequirementCustomFieldDesignValue", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getRequirements", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectid', 'requirementdocid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getReqCoverage", null);
__decorate([
    (0, decorators_1.MandatoryFields)([['testcaseid', 'testcaseexternalid'], 'testplanid', 'status', 'steps']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "reportTCResult", null);
__decorate([
    (0, decorators_1.MandatoryFields)([['testcaseid', 'testcaseexternalid'], 'testplanid', 'status', 'steps']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "setTestCaseExecutionResult", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testcasename', 'testsuiteid', 'testprojectid', 'authorlogin', 'summary', 'steps']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "createTestCase", null);
__decorate([
    (0, decorators_1.MandatoryFields)([['testcaseexternalid', 'testcaseid'], 'action', 'steps']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "createTestCaseSteps", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testcaseexternalid', 'steps']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "deleteTestCaseSteps", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testsuiteid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestCasesForTestSuite", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestCasesForTestPlan", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testcasename']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestCaseIDByName", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testcaseexternalid', 'version', 'testprojectid', 'customfieldname']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestCaseCustomFieldDesignValue", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['customfieldname', 'testprojectid', 'executionid', 'version', 'testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestCaseCustomFieldExecutionValue", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['customfieldname', 'testprojectid', 'version', 'testplanid', 'linkid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestCaseCustomFieldTestPlanDesignValue", null);
__decorate([
    (0, decorators_1.MandatoryFields)([['testcaseid', 'testcaseexternalid']]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestCaseAttachments", null);
__decorate([
    (0, decorators_1.MandatoryFields)([['testcaseid', 'testcaseexternalid']]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestCase", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testcaseexternalid', 'testprojectid', 'version']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "updateTestCaseCustomFieldDesignValue", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testcaseexternalid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "updateTestCase", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testcaseexternalid', 'version', 'testprojectid', 'executiontype']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "setTestCaseExecutionType", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid', 'testcaseexternalid', ['buildid', 'buildname'], ['platformid', 'platformname'], 'user']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "assignTestCaseExecutionTask", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid', 'testcaseexternalid', ['buildid', 'buildname'], 'user']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "unassignTestCaseExecutionTask", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['keywords']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "addTestCaseKeywords", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['keywords']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "removeTestCaseKeywords", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testcaseexternalid', 'testsuiteid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "setTestCaseTestSuite", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanname', ['testprojectname', 'prefix']]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "createTestPlan", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "deleteTestPlan", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectid', 'testplanid', 'testcaseexternalid', 'version']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "addTestCaseToTestPlan", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid', 'platformname']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "addPlatformToTestPlan", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid', 'platformname']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "removePlatformFromTestPlan", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getProjectTestPlans", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectname', 'testplanname']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestPlanByName", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTotalsForTestPlan", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['customfieldname', 'testprojectid', 'testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestPlanCustomFieldDesignValue", null);
__decorate([
    (0, decorators_1.MandatoryFields)([['testprojectid', 'prefix'], 'testsuitename']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "createTestSuite", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testplanid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestSuitesForTestPlan", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testsuiteid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestSuitesForTestSuite", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['customfieldname', 'testprojectid', 'testsuiteid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestSuiteCustomFieldDesignValue", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testprojectid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getFirstLevelTestSuitesForTestProject", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testsuiteid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestSuiteByID", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testsuiteid', 'testprojectid', 'customfields']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "updateTestSuiteCustomFieldDesignValue", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['testsuitename', 'prefix']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getTestSuite", null);
__decorate([
    (0, decorators_1.MandatoryFields)([['testprojectid', 'prefix'],]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "updateTestSuite", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['user']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getUserByLogin", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['userid']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "getUserByID", null);
__decorate([
    (0, decorators_1.MandatoryFields)(['user']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestLink.prototype, "doesUserExist", null);
exports.default = TestLink;
exports.Constants = __importStar(require("./constants"));
//# sourceMappingURL=testlink.js.map